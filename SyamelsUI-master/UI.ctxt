#BlueJ class context
comment0.params=
comment0.target=void\ initialise()
comment0.text=Ensure\ that\ the\ User\ Interface\ window\ is\ initialised
comment1.params=
comment1.target=UI()
comment1.text=\ Construct\ a\ new\ UI\ object,\ with\ its\ associated\ window.\ \ <BR>\r\n\ If\ a\ String\ argument\ is\ provided,\ the\ window\ will\ be\ given\ a\ title\ of\ the\ specified\ string.\r\n
comment10.params=
comment10.target=void\ dispose()
comment10.text=-----------------------------------------------------------------
comment100.params=
comment100.target=java.lang.String\ nextLine()
comment100.text=\ Read\ the\ remaining\ characters\ of\ the\ user's\ input\ up\ to\ (but\ not\ including)\ the\ next\ end-of-line\r\n\ and\ return\ them\ as\ a\ string.\ Reads\ and\ throws\ away\ the\ end-of-line\ character.\r\n\ If\ there\ are\ no\ characters\ on\ the\ line,\ then\ it\ returns\ an\ empty\ string\ ("").\r\n\ Waits\ for\ user\ input\ if\ there\ isn't\ any\ yet.\r\n
comment101.params=
comment101.target=boolean\ hasNext()
comment101.text=\ Returns\ true\ if\ there\ is\ any\ user\ input,\ but\ waits\ for\ the\r\n\ user\ to\ type\ something\ if\ there\ isn't\ any\ yet.\r\n\ (ie,\ always\ returns\ true).\r\n
comment102.params=
comment102.target=boolean\ hasNextInt()
comment102.text=\ Returns\ true\ if\ the\ next\ token\ in\ the\ user\ input\ is\ an\ integer.\r\n\ \ \ \ waits\ for\ the\ user\ to\ type\ something\ if\ there\ isn't\ any\ yet.\r\n
comment103.params=
comment103.target=boolean\ hasNextDouble()
comment103.text=\ Returns\ true\ if\ the\ next\ token\ in\ the\ user\ input\ is\ a\ number.\r\n\ \ \ \ waits\ for\ the\ user\ to\ type\ something\ if\ there\ isn't\ any\ yet.\r\n
comment104.params=
comment104.target=boolean\ hasNextBoolean()
comment104.text=\ Returns\ true\ if\ the\ next\ token\ in\ the\ user\ input\ is\ a\ yes/no\ or\ true/false.\r\n\ \ \ \ waits\ for\ the\ user\ to\ type\ something\ if\ there\ isn't\ any\ yet.\r\n
comment105.params=
comment105.target=boolean\ hasNextLine()
comment105.text=\ Returns\ true\ if\ there\ is\ any\ user\ input,\ but\ waits\ for\ the\r\n\ \ \ \ user\ to\ type\ somethign\ if\ there\ isn't\ any\ yet.\r\n(ie,\ always\ returns\ true).
comment106.params=s
comment106.target=void\ printMessage(java.lang.String)
comment106.text=Print\ a\ message\ to\ the\ message\ line.
comment107.params=
comment107.target=void\ fixInputPanel()
comment107.text=\ This\ needs\ to\ fix\ up\ the\ input\ panel,\ make\ sure\ it\ is\ visible\ and\r\nhas\ been\ redrawn.\ \ It\ doesn't\ work\ yet\!\!\!
comment108.params=name\ controller
comment108.target=void\ addButton(java.lang.String,\ UIButtonListener)
comment108.text=\ Add\ a\ button\ to\ the\ input\ panel\ on\ the\ left\ side\ of\ the\ gui\ window.\r\n\ The\ arguments\ are\ the\ name\ that\ should\ appear\ on\ the\ button\ and\ the\ object\r\n\ that\ will\ handle\ the\ button\ event.\ \ <P>\r\n\ Typically,\ the\ object\ will\ be\ <TT>this</TT>\ -\ the\ object\ that\ is\ putting\ the\ button\r\n\ on\ the\ gui\ window,\ but\ it\ need\ not\ be\ the\ same\ object.\ <P>\r\n\ The\ object\ that\ handles\ the\ button\ event\ must\ implement\ the\ <TT>UIButtonListener</TT>\r\n\ interface\ which\ means\ that\ it\ must\ provide\ the\ method\:<QUOTE><TT>\r\n\ \ public\ void\ buttonPerformed(String\ name)\ \ </TT></QUOTE>\r\n\ which\ will\ be\ passed\ the\ name\ of\ the\ button\ that\ was\ pressed.\r\n
comment109.params=s\ obj
comment109.target=void\ addTextField(java.lang.String,\ UITextFieldListener)
comment109.text=\ Add\ a\ text\ field\ to\ the\ input\ panel\ on\ the\ left\ side\ of\ the\ gui\ window.<P>\r\n\ A\ text\ field\ allows\ the\ user\ to\ enter\ a\ string\ value\ by\ typing\ the\ string\r\n\ into\ the\ field.\ <P>\r\n\ The\ arguments\ are\ the\ name\ of\ the\ text\ field\ and\ the\ object\r\n\ that\ will\ handle\ the\ event\ when\ a\ string\ is\ entered\ into\ the\ text\ field.\ \ <P>\r\n\ Typically,\ the\ object\ will\ be\ <TT>this</TT>\ -\ the\ object\ that\ is\ putting\ the\ text\ field\r\n\ on\ the\ gui\ window,\ but\ it\ need\ not\ be\ the\ same\ object.\ <P>\r\n\ The\ object\ that\ handles\ the\ text\ field\ event\ must\ implement\ the\ <TT>UITextFieldListener</TT>\r\n\ interface\ which\ means\ that\ it\ must\ provide\ the\ method\:<QUOTE><TT>\r\n\ \ \ public\ void\ \ textFieldPerformed(String\ name,\ String\ newText)\ </TT></QUOTE>\r\n\ which\ will\ be\ passed\ two\ strings\:\ <UL><LI>\r\n\ the\ name\ of\ the\ text\ field\ into\ which\ a\ value\ was\ entered,<LI>\r\n\ the\ value\ that\ was\ entered\ into\ the\ field.</UL>\r\n
comment11.params=
comment11.target=javax.swing.JFrame\ getFrame()
comment11.text=-----------------------------------------------------------------
comment110.params=s\ min\ max\ obj
comment110.target=void\ addSlider(java.lang.String,\ double,\ double,\ UISliderListener)
comment110.text=\ Add\ a\ slider\ to\ the\ input\ panel\ on\ the\ left\ side\ of\ the\ gui\ window.<P>\r\n\ A\ slider\ allows\ the\ user\ to\ enter\ a\ numeric\ value\ by\ moving\ the\ slider\ knob\r\n\ along\ the\ slider.\ <P>\r\n\ The\ arguments\ are\ the\ name\ of\ the\ slider,\ the\ minimum\ and\ maximum\ vales\ of\ the\ slider\r\n\ (integers)\ and\ the\ object\r\n\ that\ will\ handle\ the\ event\ when\ the\ slider\ is\ moved.\ \ <P>\r\n\ Typically,\ the\ object\ will\ be\ <TT>this</TT>\ -\ the\ object\ that\ is\ putting\ the\ slider\r\n\ on\ the\ gui\ window,\ but\ it\ need\ not\ be\ the\ same\ object.\ <P>\r\n\ The\ object\ that\ handles\ the\ slider\ event\ must\ implement\ the\ <TT>UISliderListener</TT>\r\n\ interface\ which\ means\ that\ it\ must\ provide\ the\ method\:<QUOTE><TT>\r\n\ \ public\ void\ sliderPerformed(String\ name,\ double\ num)\ </TT></QUOTE>\r\n\ which\ will\ be\ passed\ two\ values\:\ <UL><LI>\r\n\ the\ name\ of\ the\ slider\ that\ was\ moved,<LI>\r\n\ the\ current\ value\ of\ the\ slider\ (as\ a\ double)</UL>\r\n
comment111.params=s\ min\ max\ initial\ obj
comment111.target=void\ addSlider(java.lang.String,\ double,\ double,\ double,\ UISliderListener)
comment112.params=s\ sl
comment112.target=void\ addSlider(java.lang.String,\ syamelsSlider)
comment113.params=obj
comment113.target=void\ setMouseListener(UIMouseListener)
comment113.text=\ Enable\ the\ user\ to\ use\ the\ mouse\ to\ use\ the\ mouse\ on\ the\ graphics\r\n\ pane\ on\ the\ right\ side\ of\ the\ gui\ window.\ \ The\ program\ will\ respond\ to\ the\ user\ <UL><LI>\r\n\ \ pressing\ the\ mouse\ button,<LI>\r\n\ \ releasing\ the\ mouse\ button<LI>\r\n\ \ clicking\ the\ mouse\ button\ (pressing\ and\ releasing\ without\ moving)</UL>\r\n\ but\ will\ not\ notice\ movements\ of\ the\ mouse.<P>\r\n\ The\ argument\ is\ the\ object\ that\ will\ handle\ the\ events\ when\ the\ mouse\ is\r\n\ pressed,\ released,\ or\ clicked\ in\ the\ graphics\ pane.\ \ <BR>\r\n\ Typically,\ the\ object\ will\ be\ <TT>this</TT>\ -\ the\ object\ that\ is\ invoking\ \r\n\ <TT>setMouseListener</TT>,\ but\ it\ need\ not\ be\ the\ same\ object.\ <P>\r\n\ The\ object\ that\ handles\ the\ mouse\ events\ must\ implement\ the\ <TT>UIMouseListener</TT>\r\n\ interface\ which\ means\ that\ it\ must\ provide\ the\ method\:<PRE>\r\n\ \ \ \ \ public\ void\ mousePerformed(String\ action,\ double\ x,\ double\ y);</PRE>\r\n\ which\ will\ be\ passed\ three\ values\:\ <UL><LI>\r\n\ a\ string\ specifying\ what\ the\ user\ did\:\ "pressed",\ "released",\ or\ "clicked",\ or\ "doubleclicked"\ <LI>\r\n\ the\ coordinates\ (two\ doubles)\ of\ the\ mouse\ when\ the\ event\ happened.</UL>\r\n\ Note\ also\ that\ if\ the\ user\ clicks\ the\ mouse\ there\ will\ be\ three\ events\ -\ a\ "pressed",\r\n\ a\ "released",\ and\ a\ "clicked".\r\n
comment114.params=obj
comment114.target=void\ setMouseMotionListener(UIMouseListener)
comment114.text=\ Enable\ the\ user\ to\ use\ the\ mouse\ to\ use\ the\ mouse\ on\ the\ graphics\r\n\ pane\ on\ the\ right\ side\ of\ the\ gui\ window.\r\n\ This\ is\ identical\ to\ the\ <TT>setMouseListener()</TT>\r\n\ method\ (see\ above)\ except\ that\ the\ program\ will\ also\ respond\ to\ the\ user\ <UL><LI>\r\n\ \ moving\ the\ mouse\ (moving\ it\ with\ the\ button\ up),\ and\ <LI>\r\n\ \ dragging\ the\ mouse\ (moving\ it\ with\ the\ button\ down)\ </UL>\r\n\ The\ argument\ is\ the\ object\ that\ will\ handle\ the\ events\ when\ the\ mouse\ is\r\n\ pressed,\ released,\ or\ clicked\ in\ the\ graphics\ pane.\ \ <BR>\r\n\ Typically,\ the\ object\ will\ be\ <TT>this</TT>\ -\ the\ object\ that\ is\ invoking\ \r\n\ <TT>setMouseMotionListener()</TT>,\ but\ it\ need\ not\ be\ the\ same\ object.\ <P>\r\n\ The\ object\ that\ handles\ the\ mouse\ events\ must\ implement\ the\ <TT>UIMouseListener</TT>\r\n\ interface\ which\ means\ that\ it\ must\ provide\ the\ methods\:<PRE>\r\n\ \ \ \ public\ void\ mousePerformed(String\ action,\ double\ x,\ double\ y,);</PRE>\r\n\ which\ will\ be\ passed\ three\ values\:\ <UL><LI>\r\n\ a\ string\ specifying\ what\ the\ user\ did\:\ "pressed",\ "released",\ "clicked",\ "doubleclicked",\r\n\ \ \ "moved",\ or\ "dragged"\ \ <LI>\r\n\ the\ coordinates\ (two\ doubles)\ of\ the\ mouse\ when\ the\ event\ happened.</UL>\r\n
comment115.params=millis
comment115.target=void\ sleep(double)
comment115.text=\ Causes\ the\ program\ to\ pause\ for\ a\ specified\ number\ of\ milliseconds.\r\n\ This\ is\ useful\ to\ control\ graphical\ animations\ -\ do\ a\ sleep\ between\ consecutive\r\n\ draw...\ methods\ to\ control\ the\ speed\ of\ the\ animation.\r\n
comment116.params=
comment116.target=void\ quit()
comment116.text=\ Get\ rid\ of\ the\ interface\ windows.\r\nIf\ these\ are\ the\ only\ open\ windows,\ then\ the\ program\ should\ quit
comment12.params=c
comment12.target=void\ reweightLastComponent(java.awt.Container)
comment12.text=-----------------------------------------------------------------
comment13.params=
comment13.target=void\ clearGraphics()
comment13.text=\ Clear\ the\ contents\ of\ the\ graphics\ output\ region\r\nWith\ argument\ of\ false,\ do\ not\ redisplay\ the\ graphics\ pane\ yet
comment14.params=redisplay
comment14.target=void\ clearGraphics(boolean)
comment15.params=
comment15.target=void\ repaintGraphics()
comment15.text=Repaint\ the\ contents\ of\ the\ graphics\ output\ region.
comment16.params=col
comment16.target=void\ setColor(java.awt.Color)
comment17.params=col
comment17.target=void\ setForeGround(java.awt.Color)
comment18.params=
comment18.target=java.awt.Graphics\ getCanvas()
comment18.text=\ Get\ the\ Graphics\ object\ so\ that\ programs\ can\ do\ more\ complicated\ \r\noperations\ on\ the\ image\ than\ are\ provided\ by\ this\ class.
comment19.params=x1\ y1\ x2\ y2
comment19.target=void\ drawLine(double,\ double,\ double,\ double)
comment19.text=\ Draw\ a\ line\ in\ the\ graphics\ output\ region\ from\ (x1,\ y1)\ to\ (x2,\ y2)<BR>\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment2.params=e
comment2.target=void\ windowClosing(java.awt.event.WindowEvent)
comment20.params=x1\ y1\ x2\ y2\ redraw
comment20.target=void\ drawLine(double,\ double,\ double,\ double,\ boolean)
comment21.params=x1\ y1\ x2\ y2
comment21.target=void\ eraseLine(double,\ double,\ double,\ double)
comment21.text=----\ Erase\ Line-----------------------------------------------------
comment22.params=x1\ y1\ x2\ y2\ redraw
comment22.target=void\ eraseLine(double,\ double,\ double,\ double,\ boolean)
comment22.text=\ Erase\ the\ line\ in\ the\ graphics\ output\ region\ from\ (x1,\ y1)\ to\ (x2,\ y2)\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment23.params=x1\ y1\ x2\ y2
comment23.target=void\ invertLine(double,\ double,\ double,\ double)
comment23.text=----Invert\ Line-----------------------------------------------------
comment24.params=x1\ y1\ x2\ y2\ redraw
comment24.target=void\ invertLine(double,\ double,\ double,\ double,\ boolean)
comment24.text=\ Invert\ the\ line\ in\ the\ graphics\ output\ region\ from\ (x1,\ y1)\ to\ (x2,\ y2)\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment25.params=x\ y\ width\ height
comment25.target=void\ drawRect(double,\ double,\ double,\ double)
comment25.text=\ Draw\ the\ outline\ of\ a\ rectangle\ in\ the\ graphics\ output\ region\ with\r\n\ a\ top-left\ corner\ at\ (x,\ y)\ and\ of\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment26.params=x\ y\ width\ height\ redraw
comment26.target=void\ drawRect(double,\ double,\ double,\ double,\ boolean)
comment27.params=x\ y\ width\ height
comment27.target=void\ fillRect(double,\ double,\ double,\ double)
comment27.text=\ Draw\ a\ solid\ rectangle\ in\ the\ graphics\ output\ region\ with\r\n\ a\ top-left\ corner\ at\ (x,\ y)\ and\ of\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment28.params=x\ y\ width\ height\ redraw
comment28.target=void\ fillRect(double,\ double,\ double,\ double,\ boolean)
comment29.params=x\ y\ width\ height
comment29.target=void\ eraseRect(double,\ double,\ double,\ double)
comment29.text=----\ Erase\ Rect-----------------------------------------------------
comment3.params=
comment3.target=javax.swing.JMenuBar\ initMenuBar()
comment3.text=---\ Menu\ Bar\ --------------------------------------------------------------
comment30.params=x\ y\ width\ height\ redraw
comment30.target=void\ eraseRect(double,\ double,\ double,\ double,\ boolean)
comment30.text=\ Erase\ the\ rectangular\ region\ in\ the\ graphics\ output\ region\ with\r\n\ a\ top-left\ corner\ at\ (x,\ y)\ and\ of\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment31.params=x\ y\ width\ height
comment31.target=void\ invertRect(double,\ double,\ double,\ double)
comment31.text=----\ Invert\ Rect-----------------------------------------------------
comment32.params=x\ y\ width\ height\ redraw
comment32.target=void\ invertRect(double,\ double,\ double,\ double,\ boolean)
comment32.text=\ Invert\ the\ rectangular\ region\ in\ the\ graphics\ output\ region\ with\r\n\ a\ top-left\ corner\ at\ (x,\ y)\ and\ of\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment33.params=s\ x\ y
comment33.target=void\ drawString(java.lang.String,\ double,\ double)
comment33.text=\ Draw\ the\ given\ string\ in\ the\ graphics\ output\ region\ at\ the\ position\ (x,\ y)\ .\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment34.params=s\ x\ y\ redraw
comment34.target=void\ drawString(java.lang.String,\ double,\ double,\ boolean)
comment35.params=s\ x\ y
comment35.target=void\ eraseString(java.lang.String,\ double,\ double)
comment35.text=\ Erase\ the\ region\ covered\ given\ string\ in\ the\ graphics\ output\ region\ at\ the\ position\ (x,\ y).\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment36.params=s\ x\ y\ redraw
comment36.target=void\ eraseString(java.lang.String,\ double,\ double,\ boolean)
comment37.params=s\ x\ y
comment37.target=void\ invertString(java.lang.String,\ double,\ double)
comment37.text=\ Erase\ the\ region\ covered\ given\ string\ in\ the\ graphics\ output\ region\ at\ the\ position\ (x,\ y).\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment38.params=s\ x\ y\ redraw
comment38.target=void\ invertString(java.lang.String,\ double,\ double,\ boolean)
comment39.params=x\ y\ width\ height
comment39.target=void\ drawOval(double,\ double,\ double,\ double)
comment39.text=\ Draw\ the\ outline\ of\ an\ oval\ in\ the\ graphics\ output\ region\ with\ the\ left\ edge\ of\r\n\ the\ oval\ at\ x,\ the\ top\ of\ the\ oval\ at\ y,\ and\ having\ the\ specified\ width\ and\ height.\r\n\ With\ an\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment4.params=e
comment4.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment40.params=x\ y\ width\ height\ redraw
comment40.target=void\ drawOval(double,\ double,\ double,\ double,\ boolean)
comment41.params=x\ y\ width\ height
comment41.target=void\ fillOval(double,\ double,\ double,\ double)
comment41.text=\ Draw\ a\ solid\ oval\ in\ the\ graphics\ output\ region\ with\ the\ left\ edge\ of\ the\r\n\ oval\ at\ x,\ the\ top\ of\ the\ oval\ at\ y,\ and\ having\ the\ specified\ width\ and\ height.\r\n\ With\ a\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment42.params=x\ y\ width\ height\ redraw
comment42.target=void\ fillOval(double,\ double,\ double,\ double,\ boolean)
comment43.params=x\ y\ width\ height
comment43.target=void\ eraseOval(double,\ double,\ double,\ double)
comment43.text=\ Erase\ an\ oval\ region\ in\ the\ graphics\ output\ region\ with\ the\ left\ edge\ of\ the\r\n\ oval\ at\ x,\ the\ top\ of\ the\ oval\ at\ y,\ and\ having\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment44.params=x\ y\ width\ height\ redraw
comment44.target=void\ eraseOval(double,\ double,\ double,\ double,\ boolean)
comment45.params=x\ y\ width\ height
comment45.target=void\ invertOval(double,\ double,\ double,\ double)
comment45.text=\ Invert\ an\ oval\ region\ in\ the\ graphics\ output\ region\ with\ the\ left\ edge\ of\ the\r\n\ oval\ at\ x,\ the\ top\ of\ the\ oval\ at\ y,\ and\ having\ the\ specified\ width\ and\ height.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment46.params=x\ y\ width\ height\ redraw
comment46.target=void\ invertOval(double,\ double,\ double,\ double,\ boolean)
comment47.params=x\ y\ width\ height\ startAngle\ arcAngle
comment47.target=void\ drawArc(double,\ double,\ double,\ double,\ double,\ double)
comment47.text=\ Draw\ the\ outline\ of\ an\ arc\ in\ the\ graphics\ output\ region.\ \ An\ arc\ is\ a\ segment\ of\r\n\ an\ oval,\ and\ is\ specified\ by\ giving\ the\ left\ edge\ of\ the\r\n\ oval\ (x),\ the\ top\ of\ the\ oval\ (y),\ the\ width\ and\ height\ of\ the\ oval,\ and\ the\ angle\ \r\n\ (anticlockwise\ from\ the\ x-axis)\ that\ the\ arc\ starts,\ and\ the\ angle\ of\ the\ arc.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment48.params=x\ y\ width\ height\ startAngle\ arcAngle\ redraw
comment48.target=void\ drawArc(double,\ double,\ double,\ double,\ double,\ double,\ boolean)
comment49.params=x\ y\ width\ height\ startAngle\ arcAngle
comment49.target=void\ fillArc(double,\ double,\ double,\ double,\ double,\ double)
comment49.text=\ Draw\ a\ solid\ arc\ in\ the\ graphics\ output\ region.\ \ An\ arc\ is\ a\ segment\ of\r\n\ an\ oval,\ and\ is\ specified\ by\ giving\ the\ left\ edge\ of\ the\r\n\ oval\ (x),\ the\ top\ of\ the\ oval\ (y),\ the\ width\ and\ height\ of\ the\ oval,\ and\ the\ angle\ \r\n\ (anticlockwise\ from\ the\ x-axis)\ that\ the\ arc\ starts,\ and\ the\ angle\ of\ the\ arc.\r\n\ With\ a\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment5.params=e
comment5.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment50.params=x\ y\ width\ height\ startAngle\ arcAngle\ redraw
comment50.target=void\ fillArc(double,\ double,\ double,\ double,\ double,\ double,\ boolean)
comment51.params=x\ y\ width\ height\ startAngle\ arcAngle
comment51.target=void\ eraseArc(double,\ double,\ double,\ double,\ double,\ double)
comment51.text=\ Erase\ an\ arc-shaped\ region\ of\ the\ graphics\ output\ region.\ \ An\ arc\ is\ a\ \r\n\ segment\ of\ an\ oval,\ and\ is\ specified\ by\ giving\ the\ left\ edge\ of\ the\r\n\ oval\ (x),\ the\ top\ of\ the\ oval\ (y),\ the\ width\ and\ height\ of\ the\ oval,\ and\ the\ angle\ \r\n\ (anticlockwise\ from\ the\ x-axis)\ that\ the\ arc\ starts,\ and\ the\ angle\ of\ the\ arc.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment52.params=x\ y\ width\ height\ startAngle\ arcAngle\ redraw
comment52.target=void\ eraseArc(double,\ double,\ double,\ double,\ double,\ double,\ boolean)
comment53.params=x\ y\ width\ height\ startAngle\ arcAngle
comment53.target=void\ invertArc(double,\ double,\ double,\ double,\ double,\ double)
comment53.text=\ Invert\ an\ arc-shaped\ region\ of\ the\ graphics\ output\ region.\ \ An\ arc\ is\ a\ \r\n\ segment\ of\ an\ oval,\ and\ is\ specified\ by\ giving\ the\ left\ edge\ of\ the\r\n\ oval\ (x),\ the\ top\ of\ the\ oval\ (y),\ the\ width\ and\ height\ of\ the\ oval,\ and\ the\ angle\ \r\n\ (anticlockwise\ from\ the\ x-axis)\ that\ the\ arc\ starts,\ and\ the\ angle\ of\ the\ arc.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment54.params=x\ y\ width\ height\ startAngle\ arcAngle\ redraw
comment54.target=void\ invertArc(double,\ double,\ double,\ double,\ double,\ double,\ boolean)
comment55.params=fileName\ x\ y\ width\ height
comment55.target=void\ drawImage(java.lang.String,\ double,\ double,\ double,\ double)
comment55.text=\ Draw\ an\ image\ in\ the\ graphics\ output\ region.\ \ \r\n\ The\ image\ may\ be\ specified\ by\ giving\ a\ file\ name,\ or\ providing\ the\ Image\ object.\r\n\ The\ 2nd\ and\ 3rd\ arguments\ are\ where\ the\ left,\ top\ corner\ of\ the\ image\ should\ be\ placed.\r\n\ Optional\ 4th\ and\ 5th\ arguments\ are\ the\ width\ and\ height\ to\ scale\ the\ image;\ if\r\n\ not\ provided,\ the\ image\ will\ have\ its\ natural\ size\r\n\ With\ a\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment56.params=fileName\ x\ y\ width\ height\ redraw
comment56.target=void\ drawImage(java.lang.String,\ double,\ double,\ double,\ double,\ boolean)
comment57.params=fileName\ x\ y
comment57.target=void\ drawImage(java.lang.String,\ double,\ double)
comment58.params=fileName\ x\ y\ redraw
comment58.target=void\ drawImage(java.lang.String,\ double,\ double,\ boolean)
comment59.params=img\ x\ y\ width\ height
comment59.target=void\ drawImage(java.awt.Image,\ double,\ double,\ double,\ double)
comment6.params=e
comment6.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment60.params=img\ x\ y\ width\ height\ redraw
comment60.target=void\ drawImage(java.awt.Image,\ double,\ double,\ double,\ double,\ boolean)
comment61.params=img\ x\ y
comment61.target=void\ drawImage(java.awt.Image,\ double,\ double)
comment62.params=img\ x\ y\ redraw
comment62.target=void\ drawImage(java.awt.Image,\ double,\ double,\ boolean)
comment63.params=fileName\ x\ y
comment63.target=void\ eraseImage(java.lang.String,\ double,\ double)
comment63.text=\ Erase\ an\ unscaled\ image,\ specified\ by\ a\ file\ name\ or\ an\ Image\ object,\r\n\ With\ a\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment64.params=fileName\ x\ y\ redraw
comment64.target=void\ eraseImage(java.lang.String,\ double,\ double,\ boolean)
comment65.params=img\ x\ y
comment65.target=void\ eraseImage(java.awt.Image,\ double,\ double)
comment66.params=img\ x\ y\ redraw
comment66.target=void\ eraseImage(java.awt.Image,\ double,\ double,\ boolean)
comment67.params=xPoints\ yPoints\ nPoints
comment67.target=void\ drawPolygon(double[],\ double[],\ int)
comment67.text=\ Draw\ the\ outline\ of\ an\ polygon\ in\ the\ graphics\ output\ region.\r\n\ The\ polygon\ is\ specified\ by\ two\ arrays\ containing\ the\ x\ coordinates\ and\ the\ y\ coordinates\r\n\ of\ the\ series\ of\ vertices\ of\ the\ polygon,\ and\ the\ number\ of\ vertices.\r\n\ With\ an\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment68.params=xPoints\ yPoints\ nPoints\ redraw
comment68.target=void\ drawPolygon(double[],\ double[],\ int,\ boolean)
comment69.params=xPoints\ yPoints\ nPoints
comment69.target=void\ fillPolygon(double[],\ double[],\ int)
comment69.text=\ Draw\ a\ filled\ polygon\ in\ the\ graphics\ output\ region.\r\n\ The\ polygon\ is\ specified\ by\ two\ arrays\ containing\ the\ x\ coordinates\ and\ the\ y\ coordinates\r\n\ of\ the\ series\ of\ vertices\ of\ the\ polygon,\ and\ the\ number\ of\ vertices.\r\n\ With\ a\ final\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n\ (Drawing\ a\ number\ of\ shapes\ without\ redisplaying,\ then\ calling\ the\ <TT>repaintGraphics()</TT>\r\n\ method\ produces\ faster\ and\ smoother\ animation,\ but\ is\ more\ complicated.)\r\n
comment7.params=
comment7.target=void\ checkInitialised()
comment7.text=\=\=\=\=\=\=\=\ UTILITIES\ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
comment70.params=xPoints\ yPoints\ nPoints\ redraw
comment70.target=void\ fillPolygon(double[],\ double[],\ int,\ boolean)
comment71.params=xPoints\ yPoints\ nPoints
comment71.target=void\ erasePolygon(double[],\ double[],\ int)
comment71.text=\ Erase\ an\ polygon\ region\ in\ the\ graphics\ output\ region.\r\n\ The\ polygon\ is\ specified\ by\ two\ arrays\ containing\ the\ x\ coordinates\ and\ the\ y\ coordinates\r\n\ of\ the\ series\ of\ vertices\ of\ the\ polygon,\ and\ the\ number\ of\ vertices.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment72.params=xPoints\ yPoints\ nPoints\ redraw
comment72.target=void\ erasePolygon(double[],\ double[],\ int,\ boolean)
comment73.params=xPoints\ yPoints\ nPoints
comment73.target=void\ invertPolygon(double[],\ double[],\ int)
comment73.text=\ Invert\ an\ polygon\ region\ in\ the\ graphics\ output\ region.\r\n\ The\ polygon\ is\ specified\ by\ two\ arrays\ containing\ the\ x\ coordinates\ and\ the\ y\ coordinates\r\n\ of\ the\ series\ of\ vertices\ of\ the\ polygon,\ and\ the\ number\ of\ vertices.\r\n\ With\ an\ additional\ boolean\ argument\ of\ <TT>false</TT>,\ do\ not\ redisplay\ the\ graphics\ pane\ yet.\r\n
comment74.params=xPoints\ yPoints\ nPoints\ redraw
comment74.target=void\ invertPolygon(double[],\ double[],\ int,\ boolean)
comment75.params=
comment75.target=void\ clearText()
comment75.text=Clear\ the\ contents\ of\ the\ text\ output\ region
comment76.params=s
comment76.target=void\ print(java.lang.String)
comment76.text=\ Print\ a\ String\ to\ the\ text\ pane\r\n
comment77.params=b
comment77.target=void\ print(boolean)
comment77.text=\ Print\ a\ boolean\ to\ the\ text\ pane\r\n
comment78.params=c
comment78.target=void\ print(char)
comment78.text=\ Print\ a\ character\ \ to\ the\ text\ pane\r\n
comment79.params=d
comment79.target=void\ print(double)
comment79.text=\ Print\ a\ number\ to\ the\ text\ pane\r\n
comment8.params=
comment8.target=void\ ensureGraphics()
comment80.params=i
comment80.target=void\ print(int)
comment80.text=\ Print\ an\ integer\ to\ the\ text\ pane\r\n
comment81.params=o
comment81.target=void\ print(java.lang.Object)
comment81.text=\ Print\ an\ object\ to\ the\ text\ pane\r\n\ \ \ \ Note,\ it\ calls\ the\ toString()\ method\ on\ the\ object,\ and\ prints\ the\ result.\r\n\ \ \ \ This\ may\ or\ may\ not\ be\ useful.\r\n
comment82.params=
comment82.target=void\ println()
comment82.text=\ Start\ a\ new\ line\ on\ the\ text\ pane.\r\n
comment83.params=s
comment83.target=void\ println(java.lang.String)
comment83.text=\ Print\ a\ string\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n
comment84.params=b
comment84.target=void\ println(boolean)
comment84.text=\ Print\ a\ boolean\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n
comment85.params=c
comment85.target=void\ println(char)
comment85.text=\ Print\ a\ character\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n
comment86.params=d
comment86.target=void\ println(double)
comment86.text=\ Print\ a\ number\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n
comment87.params=i
comment87.target=void\ println(int)
comment87.text=\ Print\ an\ integer\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n
comment88.params=o
comment88.target=void\ println(java.lang.Object)
comment88.text=\ Print\ an\ object\ to\ the\ text\ pane\ and\ start\ a\ new\ line.\r\n\ \ \ \ Note,\ it\ calls\ the\ toString()\ method\ on\ the\ object,\ and\ prints\ the\ result.\r\n\ \ \ \ This\ may\ or\ may\ not\ be\ useful.\r\n
comment89.params=format\ args
comment89.target=void\ printf(java.lang.String,\ java.lang.Object[])
comment89.text=\ The\ <TT>printf()</TT>\ method\ requires\ a\ format\ string\ (which\r\n\ \ will\ contain\ "holes"\ specified\ with\ %'s)\ and\ additional\ arguments\r\n\ \ which\ will\ be\ placed\ "in\ the\ holes",\ using\ the\ specified\ formatting.\r\n
comment9.params=
comment9.target=void\ ensureText()
comment90.params=question
comment90.target=void\ prompt(java.lang.String)
comment90.text=\=\=\=\=\=\=\ INPUT\ from\ TEXT\ PANE\ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=
comment91.params=question
comment91.target=java.lang.String\ askToken(java.lang.String)
comment91.text=\ Prints\ the\ question\ and\ waits\ for\ the\ user\ to\ answer.\r\n\ \ \ \ Returns\ the\ first\ token\ in\ their\ answer\ as\ a\ String.\r\n\ \ \ \ Removes\ any\ pending\ user\ input\ before\ asking\ the\ question.\r\n
comment92.params=question
comment92.target=java.lang.String\ askString(java.lang.String)
comment92.text=\ Prints\ the\ question\ and\ waits\ for\ the\ user\ to\ answer\r\n\ \ \ \ Returns\ their\ answer\ as\ a\ String.\r\n\ \ \ \ Removes\ any\ pending\ user\ input\ before\ asking\ the\ question.\r\n
comment93.params=question
comment93.target=int\ askInt(java.lang.String)
comment93.text=\ Prints\ the\ question\ and\ waits\ for\ the\ user\ to\ answer\ with\ an\ integer\r\n\ \ \ \ Returns\ their\ answer\ as\ an\ int\r\n\ \ \ \ Removes\ any\ pending\ user\ input\ before\ asking\ the\ question.\r\n
comment94.params=question
comment94.target=double\ askDouble(java.lang.String)
comment94.text=\ Prints\ the\ question\ and\ waits\ for\ the\ user\ to\ answer\ with\ a\ number\r\n\ \ \ \ Returns\ their\ answer\ as\ a\ double.\r\n\ \ \ \ Removes\ any\ pending\ user\ input\ before\ asking\ the\ question.\r\n
comment95.params=question
comment95.target=boolean\ askBoolean(java.lang.String)
comment95.text=\ Prints\ the\ question\ and\ waits\ for\ the\ user\ to\ answer\ with\ yes/no\ or\ true/false.\r\n\ \ \ \ Returns\ their\ answer\ as\ a\ boolean.\r\n\ \ \ \ Removes\ any\ pending\ user\ input\ before\ asking\ the\ question.\r\n
comment96.params=
comment96.target=java.lang.String\ next()
comment96.text=\ Read\ the\ next\ token\ of\ the\ user's\ input\ and\ return\ it.\ \r\n\ Waits\ for\ user\ input\ if\ there\ isn't\ any\ yet.\r\n
comment97.params=
comment97.target=int\ nextInt()
comment97.text=\ Read\ the\ next\ token\ of\ the\ user's\ input\ and\r\n\ return\ it\ as\ an\ int\ if\ it\ is\ an\ integer.\ \r\n\ Throws\ an\ exception\ if\ it\ is\ not\ an\ integer.\ \r\n\ Waits\ for\ user\ input\ if\ there\ isn't\ any\ yet.\r\n
comment98.params=
comment98.target=double\ nextDouble()
comment98.text=\ Read\ the\ next\ token\ of\ the\ user's\ input\ and\r\n\ return\ it\ as\ a\ double\ if\ it\ is\ a\ number.\ \r\n\ Throws\ an\ exception\ if\ it\ is\ not\ a\ number.\ \r\n\ Waits\ for\ user\ input\ if\ there\ isn't\ any\ yet.\r\n
comment99.params=
comment99.target=boolean\ nextBoolean()
comment99.text=\ Read\ the\ next\ token\ of\ the\ user's\ input\ and\r\n\ return\ true\ if\ it\ is\ "yes",\ "y",\ or\ "true",\r\n\ return\ false\ if\ it\ is\ "no",\ "n",\ or\ "false"\ (case\ insensitive).\r\n\ Throws\ an\ exception\ if\ it\ is\ anything\ else.\r\n\ Waits\ for\ user\ input\ if\ there\ isn't\ any\ yet.\r\n
numComments=117
